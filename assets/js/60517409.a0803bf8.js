"use strict";(self.webpackChunk_honestfoodcompany_pubsub=self.webpackChunk_honestfoodcompany_pubsub||[]).push([[86],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var i=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,s=function(e,t){if(null==e)return{};var n,i,s={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},b=i.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),b=p(n),d=s,m=b["".concat(c,".").concat(d)]||b[d]||u[d]||r;return n?i.createElement(m,o(o({ref:t},l),{},{components:n})):i.createElement(m,o({ref:t},l))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=b;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:s,o[1]=a;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}b.displayName="MDXCreateElement"},5226:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>a,contentTitle:()=>c,metadata:()=>p,toc:()=>l,default:()=>b});var i=n(3117),s=n(102),r=(n(7294),n(3905)),o=["components"],a={id:"subscriptions",title:"Subscriptions",sidebar_position:3},c=void 0,p={unversionedId:"subscriptions",id:"subscriptions",isDocsHomePage:!1,title:"Subscriptions",description:"Create a Subscriber to define a message handler for messages that are published on the corresponding topic.",source:"@site/docs/Subscriptions.md",sourceDirName:".",slug:"/subscriptions",permalink:"/hfc-pubsub/subscriptions",editUrl:"https://github.com/deliveryhero/hfc-pubsub/edit/main/docs/docs/Subscriptions.md",version:"current",sidebarPosition:3,frontMatter:{id:"subscriptions",title:"Subscriptions",sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Topics",permalink:"/hfc-pubsub/topics"},next:{title:"Subscription Service",permalink:"/hfc-pubsub/service"}},l=[{value:"Typescript subscription example",id:"typescript-subscription-example",children:[]},{value:"Javascript subscription example",id:"javascript-subscription-example",children:[]},{value:"Subscription example with subscriber options",id:"subscription-example-with-subscriber-options",children:[]},{value:"Subscription with a Dead-letter Policy",id:"subscription-with-a-dead-letter-policy",children:[]},{value:"Binding Subscriber and Publisher role",id:"binding-subscriber-and-publisher-role",children:[]},{value:"Subscription with Retry Policy",id:"subscription-with-retry-policy",children:[]},{value:"Subscription with Message Ordering",id:"subscription-with-message-ordering",children:[]},{value:"Subscriber Options",id:"subscriber-options",children:[]}],u={toc:l};function b(e){var t=e.components,n=(0,s.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscriber")," to define a message handler for messages that are published on the corresponding topic."),(0,r.kt)("p",null,"Subscribers are contained in ",(0,r.kt)("inlineCode",{parentName:"p"},"PUBSUB_ROOT_DIR/subscriptions"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Files ending in ",(0,r.kt)("inlineCode",{parentName:"p"},".sub.js")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"PUBSUB_ROOT_DIR/subscriptions")," will be autoloaded by the subscription server.")),(0,r.kt)("h3",{id:"typescript-subscription-example"},"Typescript subscription example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// PUBSUB_ROOT_DIR/subscriptions/simple.topic.name.console-log.sub.ts\nimport { SubscriberObject, Message } from \"@honestfoodcompany/pubsub\"; // this import is optional, it's gives us the interfaces to use below\n\nexport default: SubscriberObject = {\n  topicName: 'simple.topic',\n  subscriptionName: 'simple.topic.console-log.sub',\n  description: 'Will console log messages published on test.topic',\n\n  handleMessage: function(message: Message): void {\n    console.log(this.subscriptionName, 'received message');\n    console.log(message.data.toString());\n    message.ack();\n  },\n};\n\n")),(0,r.kt)("h3",{id:"javascript-subscription-example"},"Javascript subscription example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// PUBSUB_ROOT_DIR/subscriptions/simple.topic.name.sub.js\nexports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.sub',\n  description: 'Will console log messages published on test.topic',\n\n  handleMessage: function (message) {\n    console.log(this.subscriptionName, 'received message');\n    console.log(message.data.toString());\n    message.ack();\n  },\n};\n")),(0,r.kt)("h3",{id:"subscription-example-with-subscriber-options"},"Subscription example with ",(0,r.kt)("a",{parentName:"h3",href:"#subscriber-options"},"subscriber options")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// PUBSUB_ROOT_DIR/subscriptions/simple.topic.name.subscription.js\nexports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.subscription',\n  description: 'Will console log messages published on test.topic',\n  options: {\n    flowControl: {\n      maxMessages: 500, // max messages in progress\n    },\n  },\n  handleMessage: function (message) {\n    console.log(`received a message on ${this.subscriptionName}`);\n    console.log(message.data.toString());\n    message.ack();\n  },\n};\n")),(0,r.kt)("h3",{id:"subscription-with-a-dead-letter-policy"},"Subscription with a Dead-letter Policy"),(0,r.kt)("p",null,"It is possible to define a dead-letter policy for a subscription. If the dead letter topic does not exist, it will be created automatically by the framework. There needs to be a ",(0,r.kt)("inlineCode",{parentName:"p"},"PROJECT_NUMBER")," defined for dead letter to pick up publisher, subscriber role or we use the Project ID to fetch it. ",(0,r.kt)("inlineCode",{parentName:"p"},"createDefaultSubscription")," will create a default dead letter subscription with name having ",(0,r.kt)("inlineCode",{parentName:"p"},".default")," added to ",(0,r.kt)("inlineCode",{parentName:"p"},"deadLetterTopic"),". Check ",(0,r.kt)("a",{parentName:"p",href:"#binding-subscriber-and-publisher-role"},"Binding Subscriber and Publisher role")," for more details"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// PUBSUB_ROOT_DIR/subscriptions/simple.topic.sub.js\nexports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.sub',\n  description: 'Will console log messages published on test.topic',\n  options: {\n    deadLetterPolicy: {\n      deadLetterTopic: 'test.deadletter.topic',\n      maxDeliveryAttempts: 15,\n      createDefaultSubscription: true,\n    },\n  },\n  handleMessage: function (message) {\n    console.log(`received a message on ${this.subscriptionName}`);\n    console.log(message.data.toString());\n  },\n};\n")),(0,r.kt)("h3",{id:"binding-subscriber-and-publisher-role"},"Binding Subscriber and Publisher role"),(0,r.kt)("p",null,"To automatically have a Publisher,Subscriber role attached to your dead letters you need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"PROJECT_NUMBER")," in the env list. If this ",(0,r.kt)("inlineCode",{parentName:"p"},"PROJECT_NUMBER")," isn't available in env then it'll use ",(0,r.kt)("inlineCode",{parentName:"p"},"GOOGLE_CLOUD_PUB_SUB_PROJECT_ID")," to fetch it.\nBinding the above policies don't require current subscriptions to be deleted."),(0,r.kt)("p",null,"To find out project number through CLI use the commands below:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PROJECT=$(gcloud config get-value project)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'gcloud projects list --filter="$PROJECT" --format="value(PROJECT_NUMBER)"'))),(0,r.kt)("h3",{id:"subscription-with-retry-policy"},"Subscription with Retry Policy"),(0,r.kt)("p",null,"It is possible to define a retry configuration for a subscription:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// PUBSUB_ROOT_DIR/subscriptions/simple.topic.name.subscription.sub.js\nexports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.sub',\n  description: 'Will console log messages published on test.topic',\n  options: {\n    retryPolicy: {\n      minimumBackoff: { seconds: 20, nanos: 20 },\n      maximumBackoff: { seconds: 400, nanos: 2 },\n    },\n  },\n  handleMessage: function (message) {\n    console.log(`received a message on ${this.subscriptionName}`);\n    console.log(message.data.toString());\n  },\n};\n")),(0,r.kt)("h3",{id:"subscription-with-message-ordering"},"Subscription with Message Ordering"),(0,r.kt)("p",null,"Messages published with the same ",(0,r.kt)("inlineCode",{parentName:"p"},"ordering_key")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"PubsubMessage")," will be delivered to the subscribers in the order in which they are received by the Pub/Sub system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// PUBSUB_ROOT_DIR/subscriptions/simple.topic.name.subscription.sub.js\nexports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.sub',\n  description: 'Will console log messages published on test.topic',\n  options: {\n    enableMessageOrdering: true,\n  },\n  handleMessage: function (message) {\n    console.log(`received a message on ${this.subscriptionName}`);\n    console.log(message.data.toString());\n  },\n};\n")),(0,r.kt)("h2",{id:"subscriber-options"},"Subscriber Options"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#subscription-example-with-subscriber-options"},"Usage Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'interface SubscriberOptions {\n  /**\n   * override the default project settings from the environment variable\n   * and use the project defined here instead for the subscription\n   **/\n  project?: {\n    id: string;\n    credentials: {\n      client_email?: string;\n      private_key?: string;\n    };\n  };\n\n  /**\n   * in seconds\n   **/\n  ackDeadline?: number;\n\n  batching?: {\n    callOptions?: CallOptions; // see https://github.com/googleapis/gax-nodejs/blob/77f16fd2ac2f1bd90cc6abfcccafa94a20582017/src/gax.ts#L114\n    maxMessages?: number;\n    maxMilliseconds?: number;\n  };\n  flowControl?: {\n    allowExcessMessages?: boolean;\n    maxBytes?: number;\n    maxExtension?: number;\n    maxMessages?: number;\n  };\n  streamingOptions?: {\n    highWaterMark?: number;\n    maxStreams?: number;\n    timeout?: number;\n  };\n  deadLetterPolicy?: {\n    deadLetterTopic: string;\n    maxDeliveryAttempts: number;\n  };\n  retryPolicy?: {\n    minimumBackoff: { seconds: number; nanos?: number }; // "10s"-"599s"\n    maximumBackoff: { seconds: number; nanos?: number }; // "11s"-"600s"\n  };\n\n  /**\n   *   An expression written in the Pub/Sub [filter\n   *   language](https://cloud.google.com/pubsub/docs/filtering). If non-empty,\n   *   then only `PubsubMessage`s whose `attributes` field matches the filter are\n   *   delivered on this subscription. If empty, then no messages are filtered\n   *   out.\n   * */\n  filter?: string;\n\n  /**\n   *   If true, messages published with the same `ordering_key` in `PubsubMessage`\n   *   will be delivered to the subscribers in the order in which they\n   *   are received by the Pub/Sub system. Otherwise, they may be delivered in\n   *   any order.\n   */\n  enableMessageOrdering?: boolean;\n}\n')))}b.isMDXComponent=!0}}]);