"use strict";(self.webpackChunk_honestfoodcompany_pubsub=self.webpackChunk_honestfoodcompany_pubsub||[]).push([[843],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var s=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=s.createContext({}),p=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return s.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},b=s.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),b=p(n),d=i,m=b["".concat(c,".").concat(d)]||b[d]||u[d]||r;return n?s.createElement(m,o(o({ref:t},l),{},{components:n})):s.createElement(m,o({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=b;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var p=2;p<r;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}b.displayName="MDXCreateElement"},1963:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>a,contentTitle:()=>c,metadata:()=>p,toc:()=>l,default:()=>b});var s=n(3117),i=n(102),r=(n(7294),n(3905)),o=["components"],a={id:"subscriptions",title:"Subscriptions",sidebar_position:3},c=void 0,p={unversionedId:"Getting Started/subscriptions",id:"Getting Started/subscriptions",isDocsHomePage:!1,title:"Subscriptions",description:"Create a Subscriber to define a message handler for messages that are published on the corresponding topic.",source:"@site/docs/Getting Started/Subscriptions.md",sourceDirName:"Getting Started",slug:"/Getting Started/subscriptions",permalink:"/hfc-pubsub/Getting Started/subscriptions",editUrl:"https://github.com/deliveryhero/hfc-pubsub/edit/main/docs/docs/Getting Started/Subscriptions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"subscriptions",title:"Subscriptions",sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Topics",permalink:"/hfc-pubsub/Getting Started/topics"},next:{title:"Subscription Service",permalink:"/hfc-pubsub/Getting Started/service"}},l=[{value:"Examples",id:"examples",children:[{value:"Typescript subscription example",id:"typescript-subscription-example",children:[]},{value:"Javascript subscription example",id:"javascript-subscription-example",children:[]},{value:"Subscription example with custom subscriber options",id:"subscription-example-with-custom-subscriber-options",children:[]}]},{value:"Subscription with a Dead-letter Policy",id:"subscription-with-a-dead-letter-policy",children:[{value:"Binding Subscriber and Publisher role",id:"binding-subscriber-and-publisher-role",children:[]}]},{value:"Subscription with Retry Policy",id:"subscription-with-retry-policy",children:[]},{value:"Subscription with Message Ordering",id:"subscription-with-message-ordering",children:[]},{value:"Subscriber Options",id:"subscriber-options",children:[]}],u={toc:l};function b(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscriber")," to define a message handler for messages that are published on the corresponding topic."),(0,r.kt)("p",null,"Subscribers are contained in ",(0,r.kt)("inlineCode",{parentName:"p"},"PUBSUB_ROOT_DIR/subscriptions"),"."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"  Files ending in ",(0,r.kt)("inlineCode",{parentName:"p"},".sub.js")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".sub.ts")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"PUBSUB_ROOT_DIR/subscriptions")," will be autoloaded by the subscription server."))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"typescript-subscription-example"},"Typescript subscription example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/pubsub/subscriptions/simple.topic.name.console-log.sub.ts"',title:'"/pubsub/subscriptions/simple.topic.name.console-log.sub.ts"'},"import { SubscriberObject, Message } from \"@honestfoodcompany/pubsub\"; // this import is optional, it's gives us the interfaces to use below\n\nexport default: SubscriberObject = {\n  topicName: 'simple.topic',\n  subscriptionName: 'simple.topic.console-log.sub',\n  description: 'Will console log messages published on test.topic',\n\n  handleMessage: function(message: Message): void {\n    console.log(this.subscriptionName, 'received message');\n    console.log(message.data.toString());\n    message.ack();\n  },\n};\n\n")),(0,r.kt)("h3",{id:"javascript-subscription-example"},"Javascript subscription example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/pubsub/subscriptions/simple.topic.name.sub.js"',title:'"/pubsub/subscriptions/simple.topic.name.sub.js"'},"exports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.sub',\n  description: 'Will console log messages published on test.topic',\n\n  handleMessage: function (message) {\n    console.log(this.subscriptionName, 'received message');\n    console.log(message.data.toString());\n    message.ack();\n  },\n};\n")),(0,r.kt)("h3",{id:"subscription-example-with-custom-subscriber-options"},"Subscription example with custom ",(0,r.kt)("a",{parentName:"h3",href:"#subscriber-options"},"subscriber options")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/pubsub/subscriptions/simple.topic.name.subscription.js',title:'"/pubsub/subscriptions/simple.topic.name.subscription.js'},"exports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.subscription',\n  description: 'Will console log messages published on test.topic',\n  options: {\n    flowControl: {\n      maxMessages: 500, // max messages in progress\n    },\n  },\n  handleMessage: function (message) {\n    console.log(`received a message on ${this.subscriptionName}`);\n    console.log(message.data.toString());\n    message.ack();\n  },\n};\n")),(0,r.kt)("h2",{id:"subscription-with-a-dead-letter-policy"},"Subscription with a Dead-letter Policy"),(0,r.kt)("p",null,"It is possible to define a dead-letter policy for a subscription. If the dead letter topic does not exist, it will be created automatically by the framework."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createDefaultSubscription")," will create a default dead letter subscription with name having ",(0,r.kt)("inlineCode",{parentName:"p"},".default")," added to ",(0,r.kt)("inlineCode",{parentName:"p"},"deadLetterTopic"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/pubsub/subscriptions/simple.topic.sub.js',title:'"/pubsub/subscriptions/simple.topic.sub.js'},"exports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.sub',\n  description: 'Will console log messages published on test.topic',\n  options: {\n    deadLetterPolicy: {\n      deadLetterTopic: 'test.deadletter.topic',\n      maxDeliveryAttempts: 15,\n      createDefaultSubscription: true,\n    },\n  },\n  handleMessage: function (message) {\n    console.log(`received a message on ${this.subscriptionName}`);\n    console.log(message.data.toString());\n  },\n};\n")),(0,r.kt)("h3",{id:"binding-subscriber-and-publisher-role"},"Binding Subscriber and Publisher role"),(0,r.kt)("p",null,"The framework will automatically attach a Publisher & Subscriber role to your dead letter queue, just add a DLQ config and make sure your service account has the roles defined ",(0,r.kt)("a",{parentName:"p",href:"../Drivers#google-pubsub-driver"},"here"),"."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"  Binding the above policies don't require current subscriptions to be deleted."))),(0,r.kt)("h2",{id:"subscription-with-retry-policy"},"Subscription with Retry Policy"),(0,r.kt)("p",null,"It is possible to define a retry configuration for a subscription:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/pubsub/subscriptions/simple.topic.name.subscription.sub.js"',title:'"/pubsub/subscriptions/simple.topic.name.subscription.sub.js"'},"exports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.sub',\n  description: 'Will console log messages published on test.topic',\n  options: {\n    retryPolicy: {\n      minimumBackoff: { seconds: 20, nanos: 20 },\n      maximumBackoff: { seconds: 400, nanos: 2 },\n    },\n  },\n  handleMessage: function (message) {\n    console.log(`received a message on ${this.subscriptionName}`);\n    console.log(message.data.toString());\n  },\n};\n")),(0,r.kt)("h2",{id:"subscription-with-message-ordering"},"Subscription with Message Ordering"),(0,r.kt)("p",null,"Messages published with the same ",(0,r.kt)("inlineCode",{parentName:"p"},"ordering_key")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"PubsubMessage")," will be delivered to the subscribers in the order in which they are received by the Pub/Sub system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/pubsub/subscriptions/simple.topic.name.subscription.sub.js',title:'"/pubsub/subscriptions/simple.topic.name.subscription.sub.js'},"exports.default = {\n  topicName: 'test.topic',\n  subscriptionName: 'test.topic.sub',\n  description: 'Will console log messages published on test.topic',\n  options: {\n    enableMessageOrdering: true,\n  },\n  handleMessage: function (message) {\n    console.log(`received a message on ${this.subscriptionName}`);\n    console.log(message.data.toString());\n  },\n};\n")),(0,r.kt)("h2",{id:"subscriber-options"},"Subscriber Options"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#subscription-example-with-subscriber-options"},"Usage Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface SubscriberOptions {\n  /**\n   * override the default project settings from the environment variable\n   * and use the project defined here instead for the subscription\n   **/\n  project?: {\n    id: string;\n    credentials: {\n      client_email?: string;\n      private_key?: string;\n    };\n  };\n\n  /**\n   * in seconds\n   **/\n  ackDeadline?: number;\n\n  batching?: {\n    callOptions?: CallOptions; // see https://github.com/googleapis/gax-nodejs/blob/77f16fd2ac2f1bd90cc6abfcccafa94a20582017/src/gax.ts#L114\n    maxMessages?: number;\n    maxMilliseconds?: number;\n  };\n  flowControl?: {\n    allowExcessMessages?: boolean;\n    maxBytes?: number;\n    maxExtension?: number;\n    maxMessages?: number;\n  };\n  streamingOptions?: {\n    highWaterMark?: number;\n    maxStreams?: number;\n    timeout?: number;\n  };\n  deadLetterPolicy?: {\n    deadLetterTopic: string;\n    maxDeliveryAttempts: number;\n  };\n  retryPolicy?: {\n    minimumBackoff: { seconds: number; nanos?: number }; // "10s"-"599s"\n    maximumBackoff: { seconds: number; nanos?: number }; // "11s"-"600s"\n  };\n\n  /**\n   *   An expression written in the Pub/Sub [filter\n   *   language](https://cloud.google.com/pubsub/docs/filtering). If non-empty,\n   *   then only `PubsubMessage`s whose `attributes` field matches the filter are\n   *   delivered on this subscription. If empty, then no messages are filtered\n   *   out.\n   * */\n  filter?: string;\n\n  /**\n   *   If true, messages published with the same `ordering_key` in `PubsubMessage`\n   *   will be delivered to the subscribers in the order in which they\n   *   are received by the Pub/Sub system. Otherwise, they may be delivered in\n   *   any order.\n   */\n  enableMessageOrdering?: boolean;\n}\n')))}b.isMDXComponent=!0}}]);